image: python:3.7-alpine

cache:
  key: $CI_COMMIT_REF_NAME
  paths:
    - .cache
  policy: pull

variables:
  PIP_DOWNLOAD_CACHE: .cache

stages:
- cache
  - build
- test
  - dist

virtualenv:
  stage: cache
  allow_failure: true
  before_script:
  - |
    if [ ! -f "venv/last_commit_sha" ]; then
      LAST_COMMIT=$(git log --oneline --reverse | head -n 1 | awk '{print $1};');
    else
      LAST_COMMIT=$(cat "venv/last_commit_sha");
    fi
    CURR_COMMIT=$(git rev-parse HEAD)
    git diff --name-only ${LAST_COMMIT} ${CURR_COMMIT} | grep "Pipfile"
  script:
  - pip install pipenv
  - |
    if [ ! -d "venv" ]; then
      virtualenv venv
    fi
  - . venv/bin/activate
  - pipenv install --dev
  cache:
    policy: pull-push

build:py2:
  stage: build
  image: python:2.7.15-alpine
  before_script:
    - pip install wheel
    - python -V
  script:
    - pip wheel .
    - mkdir -p dist
    - mv async_call*.whl dist
  artifacts:
    paths:
      - dist
    name: Python 2

build:py3:
  stage: build
  before_script:
    - pip install wheel
  script:
    - pip wheel .
    - mkdir -p dist
    - mv async_call*.whl dist
  artifacts:
    paths:
      - dist
    name: Python 3

test:
  image: python:3.7
  stage: test
  variables:
    VERSIONS: 2.7.15 3.5.5 3.6.6 3.7.0
  before_script:
  # Install pyenv
  - apt-get update -qq
  - apt-get install -y -qq make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget
    curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev
  - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  - export PYENV_ROOT="$HOME/.pyenv"
  - export PATH="$PYENV_ROOT/bin:$PATH"
  - eval "$(pyenv init -)"
  - . venv/bin/activate
  script:
  - setopt shwordsplit; for v in $VERSIONS; do pyenv install $v -s; done; unsetopt shwordsplit;
  - pyenv local 2.7.15 3.5.5 3.6.6 3.7.0
  - tox
  artifacts:
    paths:
      - .coverage
    expire_in: 1 hour

dist-test:
  stage: dist
  dependencies:
    - build:py2
    - build:py3
  variables:
    GIT_STRATEGY: none
  before_script:
    - pip install twine
  script:
    - >
      twine upload dist/*.whl
      --repository-url https://test.pypi.org/legacy/
      -u $PIP_UPLOAD_USER
      -p $PIP_UPLOAD_TEST_PASSWD
  only:
  - develop
  when: manual

dist:
  stage: dist
  dependencies:
    - build:py2
    - build:py3
  variables:
    GIT_STRATEGY: none
  before_script:
    - pip install twine
  script:
    - twine upload dist/*.whl -u $PIP_UPLOAD_USER -p $PIP_UPLOAD_PASSWD
  only:
  - tags
pages:
  stage: dist
  dependencies:
    - test:py3
  before_script:
    - pip install coverage
  script:
    - coverage html
  after_script:
    - mv htmlcov public
  artifacts:
    paths:
      - public
    expire_in: 1 hour
  only:
  - develop

codacy:
  stage: dist
  dependencies:
    - test:py3
  before_script:
    - apk add git
    - pip install codacy-coverage coverage
  script:
    - coverage xml
    - python-codacy-coverage -r coverage.xml